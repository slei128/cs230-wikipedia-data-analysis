#BlueJ class context
comment0.target=GraphAnalysis
comment0.text=\n\ GraphAnalysis\ analyzes\ and\ produces\ insights\ upon\ a\ dataset\ consisting\ of\ the\ Wikipedia\ pages\ \n\ of\ famous\ people\ and\ the\ hyperlinks\ between\ them.\ \n\n\ @author\ Shirley\ Lei\n\ @version\ April\ 25th,\ 2019\n
comment1.params=
comment1.target=GraphAnalysis()
comment1.text=\n\ First\ constructor\ for\ GraphAnalysis,\ which\ reads\ in\ and\ gets\ a\ graph\ of\ a\ FULL\ dataset\ of\ Wikipedia\ pages\ upon\ which\ analysis\ is\ performed.\n\ @throws\ IOException\ \ if\ an\ exception\ occurred\ when\ reading\ in\ dataset\n
comment10.params=originPerson
comment10.target=java.util.LinkedList\ getFarthestPeople(java.lang.String)
comment10.text=\n\ Helper\ method\ to\ find\ the\ farthest\ people\ from\ a\ given\ person\n\ @param\ originPerson\ the\ person\ from\ whom\ we\ are\ trying\ to\ find\ the\ farthest\ people\n\ @return\ the\ people\ that\ are\ farthest\ people\ from\ the\ given\ person\n
comment11.params=dataField\ type
comment11.target=double\ getFraction(java.lang.String,\ java.lang.String)
comment11.text=\n\ Helper\ method\ to\ find\ the\ expected\ in-group\ link\ fraction\ for\ given\ group\ (fraction\ of\ all\ nodes\ which\ are\ part\ of\ a\ given\ group)\n\ @param\ dataField\ type\ the\ field\ in\ the\ data\ set\ that\ we\ are\ examining,\ and\ the\ specified\ type\ within\ that\ field\ (e.g.\ "gender",\ "Female)\n\ @return\ the\ fraction\ of\ all\ nodes\ which\ are\ part\ of\ a\ given\ group\n
comment12.params=dataField\ type
comment12.target=double\ getAverageInGroupLinkFractions(java.lang.String,\ java.lang.String)
comment12.text=\n\ Helper\ method\ to\ find\ the\ average\ in-group\ link\ fraction\ across\ the\ whole\ given\ group\ \n\ (meaning,\ the\ fraction\ of\ links\ on\ that\ page\ which\ go\ to\ other\ pages\ in\ the\ group)\n\ @param\ dataField\ type\ the\ field\ in\ the\ data\ set\ that\ we\ are\ examining,\ and\ the\ specified\ type\ within\ that\ field\ (e.g.\ "gender",\ "Female)\n\ @return\ the\ averaged\ in-group\ fraction\n
comment13.params=args
comment13.target=void\ main(java.lang.String[])
comment13.text=\n\ Driver\ method\ to\ perform\ numerous\ analysis\ on\ the\ dataset.\ \n\n\ @param\ \ args\ command\ line\ arguments\ (unused\ in\ this\ case)\n
comment2.params=numRows
comment2.target=GraphAnalysis(int)
comment2.text=\n\ Second\ constructor\ for\ GraphAnalysis,\ which\ reads\ in\ and\ gets\ a\ graph\ of\ a\ SUBSET\ dataset\ of\ Wikipedia\ pages\ (1000\ entries)\ upon\ which\ analysis\ is\ performed.\n\ @param\ numRows\ the\ number\ of\ rows\ in\ the\ subdata\ set\ (for\ this\ assignment,\ this\ is\ fixed\ at\ SUBSET_SIZE\ (which\ is\ 1000))\n\ @throws\ IOException\ \ if\ an\ exception\ occurred\ when\ reading\ in\ dataset\n
comment3.params=
comment3.target=java.util.LinkedList\ getMaxOutPersons()
comment3.text=\n\ Helper\ method\ to\ find\ which\ person\ or\ persons\ has/have\ the\ highest\ out-degree.\n\ @return\ people\ who\ have\ the\ highest\ out-degree.\ \n
comment4.params=degree
comment4.target=int\ getNumNodes(int)
comment4.text=\n\ Helper\ method\ to\ determine\ how\ many\ nodes\ have\ out-degree\ of\ a\ given\ number\n\ @param\ degree\ the\ number\ of\ degrees\ to\ determine\ how\ many\ nodes\ there\ are\ of\ that\ number\ of\ degrees\n\ @return\ the\ number\ of\ nodes\ with\ the\ given\ degrees\n
comment5.params=
comment5.target=java.lang.String\ getMaxInPerson()
comment5.text=\n\ Helper\ method\ to\ find\ the\ person\ with\ max\ number\ of\ in-degrees\ \n\ \n\ @return\ the\ name\ of\ the\ person\ with\ max\ number\ of\ in-degrees\n
comment6.params=
comment6.target=Person\ getMaxWoman()
comment6.text=\n\ Helper\ method\ to\ find\ the\ woman\ with\ largest\ number\ of\ in-degrees\ \n\ \n\ @return\ the\ Person\ with\ max\ number\ of\ in-degrees\n
comment7.params=maxWomanInDegrees
comment7.target=int\ getNumMenGreaterThan(int)
comment7.text=\n\ Helper\ method\ to\ find\ number\ of\ men\ with\ larger\ number\ of\ in-degrees\ than\ that\ of\ the\ max\ in-degrees\ woman\n\ @param\ maxWomanInDegrees\ the\ number\ of\ in-degrees\ of\ the\ woman\ with\ the\ biggest\ in-degrees\n\ @return\ number\ of\ men\ with\ larger\ number\ of\ in-degrees\ than\ that\ of\ the\ max\ in-degrees\ woman\n
comment8.params=p1\ p2
comment8.target=java.util.Vector\ getShortestPath(java.lang.String,\ java.lang.String)
comment8.text=\n\ Helper\ method\ to\ find\ the\ shortest\ path\ between\ two\ given\ people\ names\n\ @param\ p1\ p2\ two\ people's\ names\ for\ whom\ to\ find\ shortest\ path\ between\ \n\ @return\ the\ people\ that\ make\ up\ the\ shortest\ path\ between\ the\ two\ people\n
comment9.params=
comment9.target=java.util.Hashtable\ getNumConnectionsWithinEachCountry()
comment9.text=\n\ Helper\ method\ to\ find\ the\ total\ number\ of\ connections\ within\ each\ country\ (my\ personal\ question)\n\ @return\ all\ countries\ in\ the\ dataset\ and\ the\ number\ of\ connections\ within\ each\ of\ them\n
numComments=14
